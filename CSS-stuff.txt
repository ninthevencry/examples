The position property allows you to specify the 
position of an element.

When set to relative, an element’s position is relative 
to its default position on the page.

When set to absolute, an element’s position is relative to 
its closest positioned parent element. It can be pinned to any 
part of the web page, but the element will still move with the 
rest of the document when the page is scrolled.

When set to fixed, an element’s position can be pinned to any part of the web page. The element will remain in view no matter what.
When set to sticky, an element can stick to a defined offset position when the user scrolls its parent container.
The z-index of an element specifies how far back or how far forward an element appears on the page when it overlaps other elements.
The display property allows you to control how an element flows vertically and horizontally in a document.
inline elements take up as little space as possible, and they cannot have manually adjusted width or height.
block elements take up the width of their container and can have manually adjusted heights.
inline-block elements can have set width and height, but they can also appear next to each other and do not take up their entire container width.
The float property can move elements as far left or as far right as possible on a web page.
You can clear an element’s left or right side (or both) using the clear property.

The syntax for HSL is similar to the decimal form of RGB, 
though it differs in important ways. The first number represents 
the degree of the hue, and can be between 0 and 360. The second 
and third numbers are percentages representing saturation and lightness respectively.
    
color: hsl(120, 60%, 70%);

To use opacity in the HSL color scheme, use hsla instead of hsl
Alpha is a decimal number from zero to one. If alpha is zero, 
the color will be completely transparent. If alpha is one, 
the color will be opaque. The value for half-transparent 
would be 0.5

color: hsla(34, 100%, 50%, 0.1);

The RGB color scheme has a similar syntax for opacity, rgba. 
Again, the first three values work the same as rgb and the 
last value is the alpha

color: rgba(234, 45, 98, 0.33);

A little unconventional, but still worth mentioning is how hex 
colors can also have an alpha value. By adding a two-digit 
hexadecimal value to the end of the six-digit representation 
(#52BC8280), or a one-digit hexadecimal value to the end of 
the three-digit representation (#F003), you can change the 
opacity of a hexadecimal color. Hex opacity ranges from 00 
(transparent) to FF (opaque).

Alpha can only be used with HSL, RGB, and hex colors; we 
cannot add the alpha value to name colors like green.

@font-face {
  font-family: 'MyParagraphFont';
  src: url('fonts/Roboto.woff2') format('woff2'),
       url('fonts/Roboto.woff') format('woff'),
       url('fonts/Roboto.ttf') format('truetype');
}

Let’s take a look at the example above, line by line:

The @font-face at-rule is used as the selector. It’s recommended to define the @font-face ruleset at the top of your CSS stylesheet.
Inside the declaration block, the font-family property is used to set a custom name for the downloaded font. The name can be anything you choose, but it must be surrounded by quotation marks. In the example, the font is named 'MyParagraphFont', as this font will be used for all paragraphs.
The src property contains three values, each specifying the relative path to the font file and its format. In this example, the font files are stored inside a folder named fonts within the working directory.
Note that the ordering for the different formats is important because our browser will start from the top of the list and search until it finds a font format that it supports. Read more on format prioritization on CSS-Tricks.

The box model comprises a set of properties used to create space around and between HTML elements.
The height and width of a content area can be set in pixels or percentages.
Borders surround the content area and padding of an element. The color, style, and thickness of a border can be set with CSS properties.
Padding is the space between the content area and the border. It can be set in pixels or percent.
Margin is the amount of spacing outside of an element’s border.
Horizontal margins add, so the total space between the borders of adjacent elements is equal to the sum of the right margin of one element and the left margin of the adjacent element.
Vertical margins collapse, so the space between vertically adjacent elements is equal to the larger margin.
margin: 0 auto horizontally centers an element inside of its parent content area, if it has a width.
The overflow property can be set to display, hidden, or scroll, and dictates how HTML will render content that overflows its parent’s content area.
The visibility property can hide or show elements.

CSS z-index property
The CSS z-index property specifies how far back or how far forward an element will appear on a web page when it overlaps other elements.

The z-index property uses integer values, which can be positive or negative values. The element with the highest z-index value will be at the foreground, while the element with the lowest z-index value will be at the back.

//`element1` will overlap `element2`
.element1 {
  position: absolute;
  z-index: 1;
}

.element2 {
  position: absolute;
  z-index: -1;
}
Fixed CSS Positioning
Positioning in CSS provides designers and developers options for positioning HTML elements on a web page. The CSS position can be set to static, relative, absolute or fixed. When the CSS position has a value of fixed, it is set/pinned to a specific spot on a page. The fixed element stays the same regardless of scrolling. The navigation bar is a great example of an element that is often set to position: fixed;, enabling the user to scroll through the web page and still access the navigation bar.

#navbar {
  position: fixed;
}
CSS display property
The CSS display property determines the type of render block for an element. The most common values for this property are block, inline, and inline-block.

Block-level elements take up the full width of their container with line breaks before and after, and can have their height and width manually adjusted.

Inline elements take up as little space as possible, flow horizontally, and cannot have their width or height manually adjusted.

Inline-block elements can appear next to each other, and can have their width and height manually adjusted.

.container1 {
  display: block;
}

.container2 {
  display: inline;
}

.container3 {
  display: inline-block;
}
CSS position: absolute
The value absolute for the CSS property position enables an element to ignore sibling elements and instead be positioned relative to its closest parent element that is positioned with relative or absolute. The absolute value removes an element entirely from the document flow. By using the positioning attributes top, left, bottom and right, an element can be positioned anywhere as expected.

.element {
  position: absolute;
}
CSS position: relative
The value relative of the CSS position property enables an element to be positioned relative to where it would have originally been on a web page. The offset properties can be used to determine the actual position of the element relative to its original position. Without the offset properties, this declaration will have no effect on its positioning, it will act as the default value static of the position property.

.element {
  position: relative;
}
CSS float property
The CSS float property determines how far left or how far right an element should float within its parent element. The value left floats an element to the left side of its container and the value right floats an element to the right side of its container. For the property float, the width of the container must be specified or the element will assume the full width of its containing element.

/* The content will float to the left side of the container. */
.left {
  float: left;
}

/* The content will float to the right side of the container. */
.right {
  float: right;
}
The CSS clear property
The CSS clear property specifies how an element should behave when it bumps into another element within the same containing element.The clear is usually used in combination with elements having the CSS float property. This determines on which sides floating elements are allowed to float.

/*This determines that no other elements within the same containing element are allowed to float on the left side of this element.*/
.element {
  clear: left;
}

/*This determines that no other elements within the same containing element are allowed to float on the right side of this element.*/
.element {
  clear: right;
}

/*This determines that no elements within the same containing element are allowed to float on either side of this element.*/
.element {
  clear: both;
}

/*This determines that other elements within the same containing element are allowed to float on both side of this element.*/
.element {
  clear: none;
}
